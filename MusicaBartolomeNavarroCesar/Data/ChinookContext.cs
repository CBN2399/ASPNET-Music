// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using MusicaBartolomeNavarroCesar.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;

namespace MusicaBartolomeNavarroCesar.Data
{
    public partial class ChinookContext : IdentityDbContext
    {
        public ChinookContext()
        {
        }

        public ChinookContext(DbContextOptions<ChinookContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<Album>(entity =>
            {
               // entity.Property(e => e.AlbumId).ValueGeneratedNever();

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.Albums)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlbumArtistId");
            });

            /*modelBuilder.Entity<Artist>(entity =>
            {
                entity.Property(e => e.ArtistId).ValueGeneratedNever();
            });*/

            modelBuilder.Entity<Track>(entity =>
            {
                entity.Property(e => e.TrackId).ValueGeneratedNever();

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK_TrackAlbumId");
            });

            //Lista de roles
            List<IdentityRole> roles = new List<IdentityRole>();
            roles.Add(new IdentityRole { Name = "default", NormalizedName = "DEFAULT" }); //añadir los normalize en los users
            roles.Add(new IdentityRole { Name = "Admin", NormalizedName = "ADMIN" });
            roles.Add(new IdentityRole { Name = "Premium", NormalizedName = "PREMIUM" });
            roles.Add(new IdentityRole { Name = "Manager", NormalizedName = "MANAGER" });
            modelBuilder.Entity<IdentityRole>().HasData(roles);

            //Lista de usuarios
            List<IdentityUser> users = new List<IdentityUser>();
            
            users.Add(new IdentityUser //Usuario admiistrador
            {
                UserName = "Admin@disquera.com",
                NormalizedUserName = "ADMIN@DISQUERA.COM",
                Email = "Admin@disquera.com",
                NormalizedEmail = "ADMIN@DISQUERA.COM",
                EmailConfirmed = true
            });
            
            users.Add(new IdentityUser //Usuario manager
            {
                UserName = "Manager@disquera.com",
                NormalizedUserName = "MANAGER@DISQUERA.COM",
                Email = "Manager@disquera.com",
                NormalizedEmail = "MANAGER@DISQUERA.COM",
                EmailConfirmed = true
            });

            users.Add(new IdentityUser //Usuario premium
            {
                UserName = "premium1@disquera.com",
                NormalizedUserName = "PREMIUM1@DISQUERA.COM",
                Email = "premium1@disquera.com",
                NormalizedEmail = "PREMIUM1@DISQUERA.COM",
                EmailConfirmed = true
            });
            users.Add(new IdentityUser //Usuario premium
            {
                UserName = "premium2@disquera.com",
                NormalizedUserName = "PREMIUM2@DISQUERA.COM",
                Email = "premium2@disquera.com",
                NormalizedEmail = "PREMIUM2@DISQUERA.COM",
                EmailConfirmed = true
            });
            modelBuilder.Entity<IdentityUser>().HasData(users);
            var passwordHasher = new PasswordHasher<IdentityUser>();
            users[0].PasswordHash = passwordHasher.HashPassword(users[0], "AdminPassword");
            users[1].PasswordHash = passwordHasher.HashPassword(users[1], "ManagerPassword");
            users[2].PasswordHash = passwordHasher.HashPassword(users[2], "Premium1");
            users[3].PasswordHash = passwordHasher.HashPassword(users[3], "Premium2");

            //Lista de usuarios y roles
            List<IdentityUserRole<string>> userRole = new List<IdentityUserRole<string>>();
            userRole.Add(new IdentityUserRole<string>
            {
                UserId = users[0].Id,
                RoleId = roles.Find(r => r.Name == "Admin").Id
            });
            userRole.Add(new IdentityUserRole<string>
            {
                UserId = users[1].Id,
                RoleId = roles.Find(r => r.Name == "Manager").Id
            });
            //Añadir relacion a los nuevos usuarios premium
            userRole.Add(new IdentityUserRole<string>
            {
                UserId = users[2].Id,
                RoleId = roles.Find(r => r.Name == "Premium").Id
            });
            userRole.Add(new IdentityUserRole<string>
            {
                UserId = users[3].Id,
                RoleId = roles.Find(r => r.Name == "Premium").Id
            });
            modelBuilder.Entity<IdentityUserRole<string>>().HasData(userRole);
        }
    }
}